%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.5.4-20090830-20-g3fd5033
%%CreationDate: Sat Jul 16 17:23:44 2011
%%Title: /home/bts/playtime/shorted-neurons-code/CRASH-launcher/docs/gEDA/CRASH_4-chan_launcher.sch
%%Author: bts
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 499 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
48800 50600 48800 50800 10 line
48650 50800 48950 50800 10 line
gsave
false false false false 208.000000 [(+12V) ] 0 48675 50850 144.444443 text
grestore
grestore
gsave
52489 43300 98 315 540 10 darc
52630 43300 100 315 585 10 darc
52771 43300 100 315 585 10 darc
52912 43300 100 0 225 10 darc
52200 43300 52389 43300 10 line
53012 43300 53200 43300 10 line
grestore
gsave
false false false false 260.000000 [(igniter) ] 0 52400 43500 180.555557 text
grestore
gsave
47200 45900 200 270 450 10 darc
47200 45500 200 270 450 10 darc
47200 45100 200 270 450 10 darc
47200 44700 200 270 450 10 darc
47200 44500 47200 43900 10 line
gsave
false false false false 260.000000 [(RELAY) ] 0 47500 44200 180.555557 text
grestore
47200 46700 47200 46100 10 line
48400 46700 48400 46100 10 line
48400 44500 48400 43900 10 line
46900 44400 48700 44400 10 line
48700 44400 48700 46200 10 line
48700 46200 46900 46200 10 line
46900 46200 46900 44400 10 line
47800 46000 47800 44600 10 line
47800 45300 48450 46150 10 line
grestore
gsave
false false false false 260.000000 [(U2) ] 0 48700 46250 180.555557 text
grestore
gsave
51100 47100 51000 46900 10 line
51000 46900 50900 47100 10 line
50900 47100 50800 46900 10 line
50800 46900 50700 47100 10 line
51100 47100 51200 46900 10 line
51200 46900 51250 47000 10 line
51400 47000 51250 47000 10 line
50500 47000 50652 47000 10 line
50701 47100 50650 47000 10 line
grestore
gsave
false false false false 260.000000 [(R3) ] 0 50700 47200 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 50900 46700 180.555557 text
grestore
gsave
53500 46200 53700 46100 10 line
53700 46100 53500 46000 10 line
53500 46000 53700 45900 10 line
53700 45900 53500 45800 10 line
53500 46200 53700 46300 10 line
53700 46300 53600 46350 10 line
53600 46500 53600 46350 10 line
53600 45600 53600 45752 10 line
53500 45801 53600 45750 10 line
grestore
gsave
false false false false 260.000000 [(R5) ] 90 53400 45800 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 53700 45800 180.555557 text
grestore
gsave
52100 47200 52100 46800 10 line
52100 47200 52400 47000 10 line
52400 47000 52100 46800 10 line
52400 47200 52400 46800 10 line
51800 47000 52000 47000 10 line
52700 47000 52500 47000 10 line
52500 47000 52400 47000 10 line
52100 47000 52000 47000 10 line
grestore
gsave
false true false true 260.000000 [(D1) ] 0 52350 46750 180.555557 text
grestore
48400 43300 52200 43300 10 line
53200 43300 55700 43300 10 line
gsave
55700 43100 55700 43300 10 line
55600 43100 55800 43100 10 line
55655 43050 55745 43050 10 line
55680 43010 55720 43010 10 line
grestore
gsave
53600 45400 53600 45600 10 line
53500 45400 53700 45400 10 line
53555 45350 53645 45350 10 line
53580 45310 53620 45310 10 line
grestore
gsave
53300 47100 53200 46900 10 line
53200 46900 53100 47100 10 line
53100 47100 53000 46900 10 line
53000 46900 52900 47100 10 line
53300 47100 53400 46900 10 line
53400 46900 53450 47000 10 line
53600 47000 53450 47000 10 line
52700 47000 52852 47000 10 line
52901 47100 52850 47000 10 line
grestore
gsave
false false false false 260.000000 [(R4) ] 0 52900 47200 180.555557 text
grestore
gsave
false false false false 260.000000 [(39k) ] 0 53000 46700 180.555557 text
grestore
53600 46500 53600 47000 10 line
gsave
46700 42700 46700 42300 10 line
46700 42600 46900 42700 10 line
46700 42400 46900 42300 10 line
46700 42500 46500 42500 10 line
46790 42380 46840 42330 10 line
46840 42330 46770 42340 10 line
47000 42500 47000 42100 10 line
47000 42400 47200 42500 10 line
47000 42200 47200 42100 10 line
47090 42180 47140 42130 10 line
47140 42130 47070 42140 10 line
47200 42500 47200 42800 10 line
47200 42800 46900 42800 10 line
46900 42700 46900 42800 10 line
47200 42100 47200 41900 10 line
46200 42500 46500 42500 10 line
46900 42300 47000 42300 10 line
47200 42800 47200 43000 10 line
47000 42500 500 0 360 10 darc
47200 43300 47200 43000 10 line
47200 41600 47200 41900 10 line
grestore
gsave
false false false false 260.000000 [(T1) ] 0 46600 41870 180.555557 text
grestore
47200 48000 50500 48000 10 line
42600 42500 46200 42500 10 line
gsave
54200 47000 54400 47000 10 line
54400 47100 54400 46900 10 line
54400 47100 54900 47100 10 line
54900 47100 55000 47000 10 line
55000 47000 54900 46900 10 line
54900 46900 54400 46900 10 line
grestore
gsave
false true false true 260.000000 [(analog_Channel_N_sense) ] 0 56100 47300 180.555557 text
grestore
gsave
45200 49400 45000 49400 10 line
45000 49300 45000 49500 10 line
45000 49300 44500 49300 10 line
44500 49300 44400 49400 10 line
44400 49400 44500 49500 10 line
44500 49500 45000 49500 10 line
grestore
gsave
false false false false 260.000000 [(analog_HV_sense) ] 0 43600 49100 180.555557 text
grestore
gsave
42400 42500 42600 42500 10 line
41800 42600 41800 42400 10 line
41800 42600 42300 42600 10 line
42300 42600 42400 42500 10 line
42400 42500 42300 42400 10 line
42300 42400 41800 42400 10 line
grestore
gsave
false false false false 260.000000 [(D_channel_N_firePin) ] 0 41200 42200 180.555557 text
grestore
gsave
false false false false 312.000000 [(CRASH Launcher - per-channel continuity sense and ignition relay) ] 0 50000 40700 216.666672 text
grestore
gsave
false false false false 260.000000 [(1.0) ] 0 53900 40400 180.555557 text
grestore
gsave
false false false false 260.000000 [(Bryan Schmidt) ] 0 53900 40100 180.555557 text
grestore
gsave
45600 45000 45600 44800 10 line
45600 44100 45600 44300 10 line
45700 44600 45600 44500 10 line
45600 44500 45500 44600 10 line
45700 44600 45500 44600 10 line
45700 44500 45500 44500 10 line
45600 44500 45600 44300 10 line
45600 44600 45600 44800 10 line
45740 44570 45840 44470 10 line
45840 44470 45810 44520 10 line
45840 44470 45790 44500 10 line
45740 44500 45840 44400 10 line
45840 44400 45810 44450 10 line
45840 44400 45790 44430 10 line
grestore
gsave
false false false false 260.000000 [(LED_N_firing \(optional\)) ] 0 43600 44500 180.555557 text
grestore
gsave
46900 49500 46800 49300 10 line
46800 49300 46700 49500 10 line
46700 49500 46600 49300 10 line
46600 49300 46500 49500 10 line
46900 49500 47000 49300 10 line
47000 49300 47050 49400 10 line
47200 49400 47050 49400 10 line
46300 49400 46452 49400 10 line
46501 49500 46450 49400 10 line
grestore
gsave
false false false false 260.000000 [(R1) ] 0 46500 49600 180.555557 text
grestore
gsave
false false false false 260.000000 [(62k) ] 0 46700 49100 180.555557 text
grestore
gsave
47800 49500 47700 49300 10 line
47700 49300 47600 49500 10 line
47600 49500 47500 49300 10 line
47500 49300 47400 49500 10 line
47800 49500 47900 49300 10 line
47900 49300 47950 49400 10 line
48100 49400 47950 49400 10 line
47200 49400 47352 49400 10 line
47401 49500 47350 49400 10 line
grestore
gsave
false false false false 260.000000 [(R2) ] 0 47400 49600 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 47600 49100 180.555557 text
grestore
gsave
48400 49200 48400 49400 10 line
48300 49200 48500 49200 10 line
48355 49150 48445 49150 10 line
48380 49110 48420 49110 10 line
grestore
48400 49400 48100 49400 10 line
45200 49400 46300 49400 10 line
[[43100 48800] [43200 48800] [43300 48800] [43400 48800] [43500 48800] [43600 48800] [43700 48800] [43800 48800] [43900 48800] [44000 48800] [44100 48800] [44200 48800] [44300 48800] [44400 48800] [44500 48800] [44600 48800] [44700 48800] [44800 48800] [44900 48800] [45000 48800] [45100 48800] [45200 48800] [45300 48800] [45400 48800] [45500 48800] [45600 48800] [45700 48800] [45800 48800] [45900 48800] [46000 48800] [46100 48800] [46200 48800] [46300 48800] [46400 48800] [46500 48800] [46600 48800] [46700 48800] [46800 48800] [46900 48800] [47000 48800] [47100 48800] [47200 48800] [47300 48800] [47400 48800] [47500 48800] [47600 48800] [47700 48800] [47800 48800] [47900 48800] [48000 48800] [48100 48800] [48200 48800] [48300 48800] [48400 48800] [48500 48800] [48600 48800] [48700 48800] ] 10 dashed
[[48800 48800] [48800 48900] [48800 49000] [48800 49100] [48800 49200] [48800 49300] [48800 49400] [48800 49500] [48800 49600] [48800 49700] [48800 49800] [48800 49900] [48800 50000] [48800 50100] [48800 50200] ] 10 dashed
[[48800 50300] [48700 50300] [48600 50300] [48500 50300] [48400 50300] [48300 50300] [48200 50300] [48100 50300] [48000 50300] [47900 50300] [47800 50300] [47700 50300] [47600 50300] [47500 50300] [47400 50300] [47300 50300] [47200 50300] [47100 50300] [47000 50300] [46900 50300] [46800 50300] [46700 50300] [46600 50300] [46500 50300] [46400 50300] [46300 50300] [46200 50300] [46100 50300] [46000 50300] [45900 50300] [45800 50300] [45700 50300] [45600 50300] [45500 50300] [45400 50300] [45300 50300] [45200 50300] [45100 50300] [45000 50300] [44900 50300] [44800 50300] [44700 50300] [44600 50300] [44500 50300] [44400 50300] [44300 50300] [44200 50300] [44100 50300] [44000 50300] [43900 50300] [43800 50300] [43700 50300] [43600 50300] [43500 50300] [43400 50300] [43300 50300] [43200 50300] ] 10 dashed
[[43100 50300] [43100 50200] [43100 50100] [43100 50000] [43100 49900] [43100 49800] [43100 49700] [43100 49600] [43100 49500] [43100 49400] [43100 49300] [43100 49200] [43100 49100] [43100 49000] [43100 48900] ] 10 dashed
gsave
53700 44400 53600 44200 10 line
53600 44200 53500 44400 10 line
53500 44400 53400 44200 10 line
53400 44200 53300 44400 10 line
53700 44400 53800 44200 10 line
53800 44200 53850 44300 10 line
54000 44300 53850 44300 10 line
53100 44300 53252 44300 10 line
53301 44400 53250 44300 10 line
grestore
gsave
false false false false 260.000000 [(R8) ] 0 53300 44500 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 0 53500 44000 180.555557 text
grestore
gsave
52800 44100 52800 44500 10 line
52800 44100 52500 44300 10 line
52500 44300 52800 44500 10 line
52500 44100 52500 44500 10 line
53100 44300 52900 44300 10 line
52200 44300 52400 44300 10 line
52400 44300 52500 44300 10 line
52800 44300 52900 44300 10 line
grestore
gsave
false false false false 260.000000 [(D3) ] 0 52550 44550 180.555557 text
grestore
54000 44300 54000 43300 10 line
gsave
44200 42200 44400 42100 10 line
44400 42100 44200 42000 10 line
44200 42000 44400 41900 10 line
44400 41900 44200 41800 10 line
44200 42200 44400 42300 10 line
44400 42300 44300 42350 10 line
44300 42500 44300 42350 10 line
44300 41600 44300 41752 10 line
44200 41801 44300 41750 10 line
newpath
44300 42500
25
0 360 arc
fill
newpath
44300 42500
25
0 360 arc
fill
grestore
gsave
false false false false 260.000000 [(R10) ] 90 44100 41800 180.555557 text
grestore
gsave
false false false false 260.000000 [(20k) ] 90 44600 42000 180.555557 text
grestore
gsave
44300 40500 44300 40700 10 line
44200 40500 44400 40500 10 line
44255 40450 44345 40450 10 line
44280 40410 44320 40410 10 line
grestore
48400 43300 48400 43900 10 line
45600 46700 47200 46700 10 line
54200 47000 53600 47000 10 line
51400 47000 51400 43300 10 line
52200 44300 51400 44300 10 line
[[51800 45000] [51900 45000] [52000 45000] [52100 45000] [52200 45000] [52300 45000] [52400 45000] [52500 45000] [52600 45000] [52700 45000] [52800 45000] [52900 45000] [53000 45000] [53100 45000] [53200 45000] [53300 45000] [53400 45000] [53500 45000] [53600 45000] [53700 45000] [53800 45000] [53900 45000] [54000 45000] [54100 45000] [54200 45000] [54300 45000] [54400 45000] [54500 45000] [54600 45000] [54700 45000] [54800 45000] [54900 45000] [55000 45000] [55100 45000] [55200 45000] [55300 45000] [55400 45000] [55500 45000] [55600 45000] [55700 45000] [55800 45000] [55900 45000] [56000 45000] [56100 45000] ] 10 dashed
[[56200 45000] [56200 45100] [56200 45200] [56200 45300] [56200 45400] [56200 45500] [56200 45600] [56200 45700] [56200 45800] [56200 45900] [56200 46000] [56200 46100] [56200 46200] [56200 46300] [56200 46400] [56200 46500] [56200 46600] [56200 46700] [56200 46800] [56200 46900] [56200 47000] [56200 47100] [56200 47200] [56200 47300] [56200 47400] [56200 47500] [56200 47600] [56200 47700] ] 10 dashed
[[56200 47800] [56100 47800] [56000 47800] [55900 47800] [55800 47800] [55700 47800] [55600 47800] [55500 47800] [55400 47800] [55300 47800] [55200 47800] [55100 47800] [55000 47800] [54900 47800] [54800 47800] [54700 47800] [54600 47800] [54500 47800] [54400 47800] [54300 47800] [54200 47800] [54100 47800] [54000 47800] [53900 47800] [53800 47800] [53700 47800] [53600 47800] [53500 47800] [53400 47800] [53300 47800] [53200 47800] [53100 47800] [53000 47800] [52900 47800] [52800 47800] [52700 47800] [52600 47800] [52500 47800] [52400 47800] [52300 47800] [52200 47800] [52100 47800] [52000 47800] [51900 47800] ] 10 dashed
[[51800 47800] [51800 47700] [51800 47600] [51800 47500] [51800 47400] [51800 47300] [51800 47200] [51800 47100] [51800 47000] [51800 46900] [51800 46800] [51800 46700] [51800 46600] [51800 46500] [51800 46400] [51800 46300] [51800 46200] [51800 46100] [51800 46000] [51800 45900] [51800 45800] [51800 45700] [51800 45600] [51800 45500] [51800 45400] [51800 45300] [51800 45200] [51800 45100] ] 10 dashed
51400 47000 51800 47000 10 line
47200 46700 47200 49400 10 line
gsave
47200 40500 47200 40700 10 line
47100 40500 47300 40500 10 line
47155 40450 47245 40450 10 line
47180 40410 47220 40410 10 line
grestore
gsave
49200 45300 49600 45300 10 line
49200 45300 49400 45600 10 line
49400 45600 49600 45300 10 line
49200 45600 49600 45600 10 line
49400 45000 49400 45200 10 line
49400 45900 49400 45700 10 line
49400 45700 49400 45600 10 line
49400 45300 49400 45200 10 line
grestore
gsave
false true false true 260.000000 [(D2) ] 0 49850 45450 180.555557 text
grestore
49400 45900 49400 46700 10 line
49400 46700 48400 46700 10 line
gsave
49500 44400 49300 44500 10 line
49300 44500 49500 44600 10 line
49500 44600 49300 44700 10 line
49300 44700 49500 44800 10 line
49500 44400 49300 44300 10 line
49300 44300 49400 44250 10 line
49400 44100 49400 44250 10 line
49400 45000 49400 44848 10 line
49500 44799 49400 44850 10 line
grestore
gsave
false false false false 260.000000 [(R7) ] 270 49600 44800 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 270 49100 44600 180.555557 text
grestore
49400 44100 49400 43300 10 line
47200 40700 47200 41600 10 line
44300 40700 44300 41600 10 line
gsave
45600 43000 45600 43200 10 line
45500 43000 45700 43000 10 line
45555 42950 45645 42950 10 line
45580 42910 45620 42910 10 line
grestore
gsave
45500 45600 45700 45500 10 line
45700 45500 45500 45400 10 line
45500 45400 45700 45300 10 line
45700 45300 45500 45200 10 line
45500 45600 45700 45700 10 line
45700 45700 45600 45750 10 line
45600 45900 45600 45750 10 line
45600 45000 45600 45152 10 line
45500 45201 45600 45150 10 line
grestore
gsave
false false false false 260.000000 [(R6) ] 90 45400 45200 180.555557 text
grestore
gsave
false false false false 260.000000 [(20k) ] 90 45900 45400 180.555557 text
grestore
45600 46700 45600 45900 10 line
gsave
45900 43300 45900 43900 10 line
46100 43600 45900 43600 10 line
gsave
false true false true 156.000000 [(B) ] 0 46000 43550 108.333336 text
grestore
45600 43100 45600 43300 10 line
gsave
false true false true 156.000000 [(C) ] 0 45700 43250 108.333336 text
grestore
45600 43900 45600 44100 10 line
gsave
false true false true 156.000000 [(E) ] 0 45700 44050 108.333336 text
grestore
45900 43750 45600 43900 10 line
45900 43450 45600 43300 10 line
10 setlinewidth
45803 43759 moveto 45900 43750 lineto 45831 43823 lineto 45823 43789 lineto closepath stroke
45803 43759 moveto 45900 43750 lineto 45831 43823 lineto 45823 43789 lineto closepath fill
grestore
gsave
false true false true 260.000000 [(Q1) ] 0 45500 43600 180.555557 text
grestore
46100 43600 47200 43600 10 line
47200 43900 47200 43300 10 line
45600 43100 45600 43200 10 line
gsave
51700 50000 200 90 270 10 darc
51700 49600 200 90 270 10 darc
51700 49200 200 90 270 10 darc
51700 48800 200 90 270 10 darc
51700 48600 51700 48000 10 line
gsave
false true false false 260.000000 [(RELAY) ] 0 51400 48300 180.555557 text
grestore
51700 50800 51700 50200 10 line
50500 50800 50500 50200 10 line
50500 48600 50500 48000 10 line
50200 48500 52000 48500 10 line
52000 48500 52000 50300 10 line
52000 50300 50200 50300 10 line
50200 50300 50200 48500 10 line
51100 50100 51100 48700 10 line
51100 49400 50450 50250 10 line
grestore
gsave
false true false false 260.000000 [(U1) ] 0 50200 50350 180.555557 text
grestore
gsave
false false false false 260.000000 [(master pad-side safety relay) ] 0 52100 48800 180.555557 text
grestore
48400 46700 48400 48000 10 line
50500 47000 50500 48000 10 line
48800 50600 50500 50600 10 line
50500 50600 50500 50800 10 line
gsave
false false false false 312.000000 [(below line, duplicate) ( per channel) ] 0 40200 47600 216.666672 text
grestore
[[40400 48200] [40500 48200] [40600 48200] [40700 48200] [40800 48200] [40900 48200] [41000 48200] [41100 48200] [41200 48200] [41300 48200] [41400 48200] [41500 48200] [41600 48200] [41700 48200] [41800 48200] [41900 48200] [42000 48200] [42100 48200] [42200 48200] [42300 48200] [42400 48200] [42500 48200] [42600 48200] [42700 48200] [42800 48200] [42900 48200] [43000 48200] [43100 48200] [43200 48200] [43300 48200] [43400 48200] [43500 48200] [43600 48200] [43700 48200] [43800 48200] [43900 48200] [44000 48200] [44100 48200] [44200 48200] [44300 48200] [44400 48200] [44500 48200] [44600 48200] [44700 48200] [44800 48200] [44900 48200] [45000 48200] [45100 48200] [45200 48200] [45300 48200] [45400 48200] [45500 48200] [45600 48200] [45700 48200] [45800 48200] [45900 48200] [46000 48200] [46100 48200] [46200 48200] [46300 48200] [46400 48200] [46500 48200] [46600 48200] [46700 48200] [46800 48200] [46900 48200] [47000 48200] [47100 48200] [47200 48200] [47300 48200] [47400 48200] [47500 48200] [47600 48200] [47700 48200] [47800 48200] [47900 48200] [48000 48200] [48100 48200] [48200 48200] [48300 48200] [48400 48200] [48500 48200] [48600 48200] [48700 48200] [48800 48200] [48900 48200] [49000 48200] [49100 48200] [49200 48200] [49300 48200] [49400 48200] [49500 48200] [49600 48200] [49700 48200] [49800 48200] [49900 48200] [50000 48200] [50100 48200] [50200 48200] [50300 48200] [50400 48200] [50500 48200] [50600 48200] [50700 48200] [50800 48200] [50900 48200] [51000 48200] [51100 48200] [51200 48200] [51300 48200] [51400 48200] [51500 48200] [51600 48200] [51700 48200] [51800 48200] [51900 48200] [52000 48200] [52100 48200] [52200 48200] [52300 48200] [52400 48200] [52500 48200] [52600 48200] [52700 48200] [52800 48200] [52900 48200] [53000 48200] [53100 48200] [53200 48200] [53300 48200] [53400 48200] [53500 48200] [53600 48200] [53700 48200] [53800 48200] [53900 48200] [54000 48200] [54100 48200] [54200 48200] [54300 48200] [54400 48200] [54500 48200] [54600 48200] [54700 48200] [54800 48200] [54900 48200] [55000 48200] [55100 48200] [55200 48200] [55300 48200] [55400 48200] [55500 48200] [55600 48200] [55700 48200] [55800 48200] [55900 48200] [56000 48200] [56100 48200] [56200 48200] [56300 48200] [56400 48200] [56500 48200] ] 10 dashed
gsave
false false false false 260.000000 [(current limited section) ] 0 54300 45100 180.555557 text
grestore
gsave
false false false false 260.000000 [(current limited section) ] 0 46900 50100 180.555557 text
grestore
gsave
false false false false 260.000000 [(?? do we ) (even need) (flyback ) (diode stuff ??) ] 0 50100 44200 180.555557 text
grestore
gsave
false false false false 260.000000 [(darlington inside) (ULN2003 or similar) (array package,) (includes base current) (limiting and protection ) (diodes) ] 0 45100 41000 180.555557 text
grestore
newpath
51400 43300
25
0 360 arc
fill
newpath
49400 43300
25
0 360 arc
fill
newpath
54000 43300
25
0 360 arc
fill
newpath
53600 47000
25
0 360 arc
fill
newpath
47200 48000
25
0 360 arc
fill
newpath
50500 48000
25
0 360 arc
fill
newpath
47200 48000
25
0 360 arc
fill
newpath
48400 48000
25
0 360 arc
fill
newpath
44300 42500
25
0 360 arc
fill
newpath
54000 43300
25
0 360 arc
fill
newpath
54000 43300
25
0 360 arc
fill
newpath
44300 42500
25
0 360 arc
fill
newpath
44300 42500
25
0 360 arc
fill
newpath
47200 46700
25
0 360 arc
fill
newpath
53600 47000
25
0 360 arc
fill
newpath
51400 47000
25
0 360 arc
fill
newpath
51400 43300
25
0 360 arc
fill
newpath
51400 43300
25
0 360 arc
fill
newpath
51400 44300
25
0 360 arc
fill
newpath
51400 44300
25
0 360 arc
fill
newpath
51400 44300
25
0 360 arc
fill
newpath
51400 47000
25
0 360 arc
fill
newpath
47200 46700
25
0 360 arc
fill
newpath
47200 49400
25
0 360 arc
fill
newpath
47200 48000
25
0 360 arc
fill
newpath
48400 46700
25
0 360 arc
fill
newpath
49400 43300
25
0 360 arc
fill
newpath
49400 43300
25
0 360 arc
fill
newpath
47200 43600
25
0 360 arc
fill
newpath
47200 43600
25
0 360 arc
fill
newpath
47200 43600
25
0 360 arc
fill
newpath
48400 46700
25
0 360 arc
fill
newpath
48400 48000
25
0 360 arc
fill
newpath
48400 48000
25
0 360 arc
fill
newpath
50500 48000
25
0 360 arc
fill
showpage
%%End
