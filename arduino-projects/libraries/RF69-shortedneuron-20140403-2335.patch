diff -uNr RF69.20140401/GenericSPI.h RF69/GenericSPI.h
--- RF69.20140401/GenericSPI.h	2014-03-31 15:37:43.000000000 -0600
+++ RF69/GenericSPI.h	2014-04-03 23:27:16.724577332 -0600
@@ -19,10 +19,10 @@
 /// \brief Base class for SPI interfaces
 ///
 /// This generic abstract class is used to encapsulate hardware or software SPI interfaces.
-/// The intention is so that the main RF22 class can be configured to use hardware or software SPI
+/// The intention is so that the main RF69 class can be configured to use hardware or software SPI
 /// without changing the main code.
 ///
-/// You must provide a subclass of this class to RF22 constructor.
+/// You must provide a subclass of this class to RF69 constructor.
 /// A concrete subclass theat encapsualtes the standard Arcuino hardware SPI is provided
 
 class GenericSPIClass 
diff -uNr RF69.20140401/RF69.cpp RF69/RF69.cpp
--- RF69.20140401/RF69.cpp	2014-03-31 22:57:09.000000000 -0600
+++ RF69/RF69.cpp	2014-04-03 23:26:45.337407602 -0600
@@ -154,7 +154,7 @@
     setSyncWords(syncwords, sizeof(syncwords)); // Same as RF22's
     // Some slow, reliable default speed and modulation
     setModemConfig(FSK_Rb2Fd5);
-    // 3 would be sufficient, but thes is the same as RF22's
+    // 3 would be sufficient, but this is the same as RF22's
     setPreambleLength(4);
     // An innocuous ISM frequency, same as RF22's
     setFrequency(434.0);
diff -uNr RF69.20140401/RF69.h RF69/RF69.h
--- RF69.20140401/RF69.h	2014-03-31 21:19:51.000000000 -0600
+++ RF69/RF69.h	2014-04-03 23:25:57.166682214 -0600
@@ -55,7 +55,7 @@
 ///
 /// \par Packet Format
 ///
-/// All messages sent and received by this RF22 library must conform to this packet format:
+/// All messages sent and received by this RF69 library must conform to this packet format:
 ///
 /// - 4 octets PREAMBLE
 /// - 2 octets SYNC 0x2d, 0xd4 (configurable, so you can use this as a network filter)
@@ -72,7 +72,7 @@
 /// author.  Nor is it compatible with messages sent by 'RF22'
 /// http://www.airspayce.com/mikem/arduino/RF22 also from the same author.
 ///
-/// \par Connecting RFM-22 to Arduino
+/// \par Connecting RFM-69 to Arduino
 ///
 /// We tested with Moteino, which is an Arduino Uno compatible with the RFM69W
 /// module on-board. Therefore it needs no connections other than the USB
@@ -504,7 +504,7 @@
     /// Defines register values for a set of modem configuration registers
     /// that can be passed to setModemConfig()
     /// if none of the choices in ModemConfigChoice suit your need
-    /// setModemConfig() writes the register values to the appropriate RF22 registers
+    /// setModemConfig() writes the register values to the appropriate RF69 registers
     /// to set the desired modulation type, data rate and deviation/bandwidth.
     typedef struct
     {
@@ -554,7 +554,7 @@
     /// Constructor. You can have multiple instances, but each instance must have its own
     /// interrupt and slave select pin. After constructing, you must call init() to initialise the intnerface
     /// and the radio module
-    /// \param[in] slaveSelectPin the Arduino pin number of the output to use to select the RF22 before
+    /// \param[in] slaveSelectPin the Arduino pin number of the output to use to select the RF69 before
     /// accessing it. Defaults to the normal SS pin for your Arduino (D10 for Diecimila, Uno etc, D53 for Mega)
     /// \param[in] interrupt The interrupt number to use. 0 - 2. Default is interrupt 0 (Arduino input pin 2)
     /// \param[in] spi Pointer to the SPI interface object to use. 
@@ -574,15 +574,15 @@
     boolean        init();
 
     /// Issues a software reset to the 
-    /// RF22 module. Blocks for 1ms to ensure the reset is complete.
+    /// RF69 module. Blocks for 1ms to ensure the reset is complete.
     void           reset();
 
-    /// Reads a single register from the RF22
-    /// \param[in] reg Register number, one of RF22_REG_*
+    /// Reads a single register from the RF69
+    /// \param[in] reg Register number, one of RF69_REG_*
     /// \return The value of the register
     uint8_t        spiRead(uint8_t reg);
 
-    /// Writes a single byte to the RF22
+    /// Writes a single byte to the RF69
     /// \param[in] reg Register number, one of RF69_REG_*
     /// \param[in] val The value to write
     void           spiWrite(uint8_t reg, uint8_t val);
