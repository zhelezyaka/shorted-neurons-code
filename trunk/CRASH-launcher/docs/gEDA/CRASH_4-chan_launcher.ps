%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.5.4-20090830-20-g3fd5033
%%CreationDate: Thu Jul 14 13:03:38 2011
%%Title: /home/bts/playtime/shorted-neurons-code/CRASH-launcher/docs/gEDA/CRASH_4-chan_launcher.sch
%%Author: bts
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 499 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
50500 48600 50500 48800 10 line
50350 48800 50650 48800 10 line
gsave
false false false false 208.000000 [(+12V) ] 0 50375 48850 144.444443 text
grestore
grestore
gsave
52489 43300 98 315 540 10 darc
52630 43300 100 315 585 10 darc
52771 43300 100 315 585 10 darc
52912 43300 100 0 225 10 darc
52200 43300 52389 43300 10 line
53012 43300 53200 43300 10 line
grestore
gsave
false false false false 260.000000 [(ignitor) ] 0 52400 43500 180.555557 text
grestore
gsave
47200 45900 200 270 450 10 darc
47200 45500 200 270 450 10 darc
47200 45100 200 270 450 10 darc
47200 44700 200 270 450 10 darc
47200 44500 47200 43900 10 line
gsave
false false false false 260.000000 [(RELAY) ] 0 47500 44200 180.555557 text
grestore
47200 46700 47200 46100 10 line
48400 46700 48400 46100 10 line
48400 44500 48400 43900 10 line
46900 44400 48700 44400 10 line
48700 44400 48700 46200 10 line
48700 46200 46900 46200 10 line
46900 46200 46900 44400 10 line
47800 46000 47800 44600 10 line
47800 45300 48450 46150 10 line
grestore
gsave
false false false false 260.000000 [(U1) ] 0 48700 46250 180.555557 text
grestore
gsave
51100 47100 51000 46900 10 line
51000 46900 50900 47100 10 line
50900 47100 50800 46900 10 line
50800 46900 50700 47100 10 line
51100 47100 51200 46900 10 line
51200 46900 51250 47000 10 line
51400 47000 51250 47000 10 line
50500 47000 50652 47000 10 line
50701 47100 50650 47000 10 line
grestore
gsave
false false false false 260.000000 [(R5) ] 0 50700 47200 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 50900 46700 180.555557 text
grestore
gsave
53500 46200 53700 46100 10 line
53700 46100 53500 46000 10 line
53500 46000 53700 45900 10 line
53700 45900 53500 45800 10 line
53500 46200 53700 46300 10 line
53700 46300 53600 46350 10 line
53600 46500 53600 46350 10 line
53600 45600 53600 45752 10 line
53500 45801 53600 45750 10 line
grestore
gsave
false false false false 260.000000 [(R4) ] 90 53400 45800 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 53700 45800 180.555557 text
grestore
gsave
43900 42700 43900 42300 10 line
43900 42700 44200 42500 10 line
44200 42500 43900 42300 10 line
44200 42700 44200 42300 10 line
43600 42500 43800 42500 10 line
44500 42500 44300 42500 10 line
44300 42500 44200 42500 10 line
43900 42500 43800 42500 10 line
grestore
gsave
false false false false 260.000000 [(D1) ] 0 43900 42800 180.555557 text
grestore
gsave
52100 47200 52100 46800 10 line
52100 47200 52400 47000 10 line
52400 47000 52100 46800 10 line
52400 47200 52400 46800 10 line
51800 47000 52000 47000 10 line
52700 47000 52500 47000 10 line
52500 47000 52400 47000 10 line
52100 47000 52000 47000 10 line
grestore
gsave
false true false true 260.000000 [(D2) ] 0 52350 46750 180.555557 text
grestore
48400 43300 52200 43300 10 line
53200 43300 55700 43300 10 line
gsave
55700 43100 55700 43300 10 line
55600 43100 55800 43100 10 line
55655 43050 55745 43050 10 line
55680 43010 55720 43010 10 line
grestore
gsave
53600 45400 53600 45600 10 line
53500 45400 53700 45400 10 line
53555 45350 53645 45350 10 line
53580 45310 53620 45310 10 line
grestore
50500 47000 50500 48600 10 line
gsave
53300 47100 53200 46900 10 line
53200 46900 53100 47100 10 line
53100 47100 53000 46900 10 line
53000 46900 52900 47100 10 line
53300 47100 53400 46900 10 line
53400 46900 53450 47000 10 line
53600 47000 53450 47000 10 line
52700 47000 52852 47000 10 line
52901 47100 52850 47000 10 line
grestore
gsave
false false false false 260.000000 [(R3) ] 0 52900 47200 180.555557 text
grestore
gsave
false false false false 260.000000 [(62k) ] 0 53000 46700 180.555557 text
grestore
53600 46500 53600 47000 10 line
gsave
46700 42700 46700 42300 10 line
46700 42600 46900 42700 10 line
46700 42400 46900 42300 10 line
46700 42500 46500 42500 10 line
46790 42380 46840 42330 10 line
46840 42330 46770 42340 10 line
47000 42500 47000 42100 10 line
47000 42400 47200 42500 10 line
47000 42200 47200 42100 10 line
47090 42180 47140 42130 10 line
47140 42130 47070 42140 10 line
47200 42500 47200 42800 10 line
47200 42800 46900 42800 10 line
46900 42700 46900 42800 10 line
47200 42100 47200 41900 10 line
46200 42500 46500 42500 10 line
46900 42300 47000 42300 10 line
47200 42800 47200 43000 10 line
47000 42500 500 0 360 10 darc
47200 43300 47200 43000 10 line
47200 41600 47200 41900 10 line
grestore
gsave
false false false false 260.000000 [(T1) ] 0 46600 41870 180.555557 text
grestore
48400 46700 48400 48600 10 line
47200 48600 50500 48600 10 line
48400 49700 48400 48600 10 line
42600 42500 43600 42500 10 line
gsave
54200 47000 54400 47000 10 line
54400 47100 54400 46900 10 line
54400 47100 54900 47100 10 line
54900 47100 55000 47000 10 line
55000 47000 54900 46900 10 line
54900 46900 54400 46900 10 line
grestore
gsave
false true false true 260.000000 [(analog_Channel_N_sense) ] 0 56100 47300 180.555557 text
grestore
gsave
46400 49700 46200 49700 10 line
46200 49600 46200 49800 10 line
46200 49600 45700 49600 10 line
45700 49600 45600 49700 10 line
45600 49700 45700 49800 10 line
45700 49800 46200 49800 10 line
grestore
gsave
false false false false 260.000000 [(analog_HV_sense) ] 0 44800 49400 180.555557 text
grestore
gsave
42400 42500 42600 42500 10 line
41800 42600 41800 42400 10 line
41800 42600 42300 42600 10 line
42300 42600 42400 42500 10 line
42400 42500 42300 42400 10 line
42300 42400 41800 42400 10 line
grestore
gsave
false false false false 260.000000 [(D_channel_N_firePin) ] 0 41200 42200 180.555557 text
grestore
gsave
false false false false 312.000000 [(CRASH Launcher - per-channel continuity sense and ignition relay) ] 0 50000 40700 216.666672 text
grestore
gsave
false false false false 260.000000 [(0.3) ] 0 53900 40400 180.555557 text
grestore
gsave
false false false false 260.000000 [(Bryan Schmidt) ] 0 53900 40100 180.555557 text
grestore
gsave
45300 46000 45200 45800 10 line
45200 45800 45100 46000 10 line
45100 46000 45000 45800 10 line
45000 45800 44900 46000 10 line
45300 46000 45400 45800 10 line
45400 45800 45450 45900 10 line
45600 45900 45450 45900 10 line
44700 45900 44852 45900 10 line
44901 46000 44850 45900 10 line
grestore
gsave
false false false false 260.000000 [(R6) ] 0 44900 46100 180.555557 text
grestore
gsave
false false false false 260.000000 [(47k) ] 0 45100 45600 180.555557 text
grestore
gsave
44700 45900 44500 45900 10 line
43800 45900 44000 45900 10 line
44300 45800 44200 45900 10 line
44200 45900 44300 46000 10 line
44300 45800 44300 46000 10 line
44200 45800 44200 46000 10 line
44200 45900 44000 45900 10 line
44300 45900 44500 45900 10 line
44270 45760 44170 45660 10 line
44170 45660 44220 45690 10 line
44170 45660 44200 45710 10 line
44200 45760 44100 45660 10 line
44100 45660 44150 45690 10 line
44100 45660 44130 45710 10 line
grestore
gsave
false true false true 260.000000 [(LED_N_firing \(optional\)) ] 0 45200 45600 180.555557 text
grestore
gsave
48100 49800 48000 49600 10 line
48000 49600 47900 49800 10 line
47900 49800 47800 49600 10 line
47800 49600 47700 49800 10 line
48100 49800 48200 49600 10 line
48200 49600 48250 49700 10 line
48400 49700 48250 49700 10 line
47500 49700 47652 49700 10 line
47701 49800 47650 49700 10 line
grestore
gsave
false false false false 260.000000 [(R1) ] 0 47700 49900 180.555557 text
grestore
gsave
false false false false 260.000000 [(62k) ] 0 47900 49400 180.555557 text
grestore
gsave
49000 49800 48900 49600 10 line
48900 49600 48800 49800 10 line
48800 49800 48700 49600 10 line
48700 49600 48600 49800 10 line
49000 49800 49100 49600 10 line
49100 49600 49150 49700 10 line
49300 49700 49150 49700 10 line
48400 49700 48552 49700 10 line
48601 49800 48550 49700 10 line
grestore
gsave
false false false false 260.000000 [(R2) ] 0 48600 49900 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 48800 49400 180.555557 text
grestore
gsave
49600 49500 49600 49700 10 line
49500 49500 49700 49500 10 line
49555 49450 49645 49450 10 line
49580 49410 49620 49410 10 line
grestore
49600 49700 49300 49700 10 line
46400 49700 47500 49700 10 line
[[44300 49100] [44400 49100] [44500 49100] [44600 49100] [44700 49100] [44800 49100] [44900 49100] [45000 49100] [45100 49100] [45200 49100] [45300 49100] [45400 49100] [45500 49100] [45600 49100] [45700 49100] [45800 49100] [45900 49100] [46000 49100] [46100 49100] [46200 49100] [46300 49100] [46400 49100] [46500 49100] [46600 49100] [46700 49100] [46800 49100] [46900 49100] [47000 49100] [47100 49100] [47200 49100] [47300 49100] [47400 49100] [47500 49100] [47600 49100] [47700 49100] [47800 49100] [47900 49100] [48000 49100] [48100 49100] [48200 49100] [48300 49100] [48400 49100] [48500 49100] [48600 49100] [48700 49100] [48800 49100] [48900 49100] [49000 49100] [49100 49100] [49200 49100] [49300 49100] [49400 49100] [49500 49100] [49600 49100] [49700 49100] [49800 49100] [49900 49100] ] 10 dashed
[[50000 49100] [50000 49200] [50000 49300] [50000 49400] [50000 49500] [50000 49600] [50000 49700] [50000 49800] [50000 49900] [50000 50000] [50000 50100] [50000 50200] [50000 50300] [50000 50400] [50000 50500] ] 10 dashed
[[50000 50600] [49900 50600] [49800 50600] [49700 50600] [49600 50600] [49500 50600] [49400 50600] [49300 50600] [49200 50600] [49100 50600] [49000 50600] [48900 50600] [48800 50600] [48700 50600] [48600 50600] [48500 50600] [48400 50600] [48300 50600] [48200 50600] [48100 50600] [48000 50600] [47900 50600] [47800 50600] [47700 50600] [47600 50600] [47500 50600] [47400 50600] [47300 50600] [47200 50600] [47100 50600] [47000 50600] [46900 50600] [46800 50600] [46700 50600] [46600 50600] [46500 50600] [46400 50600] [46300 50600] [46200 50600] [46100 50600] [46000 50600] [45900 50600] [45800 50600] [45700 50600] [45600 50600] [45500 50600] [45400 50600] [45300 50600] [45200 50600] [45100 50600] [45000 50600] [44900 50600] [44800 50600] [44700 50600] [44600 50600] [44500 50600] [44400 50600] ] 10 dashed
[[44300 50600] [44300 50500] [44300 50400] [44300 50300] [44300 50200] [44300 50100] [44300 50000] [44300 49900] [44300 49800] [44300 49700] [44300 49600] [44300 49500] [44300 49400] [44300 49300] [44300 49200] ] 10 dashed
46200 42500 44500 42500 10 line
gsave
53700 44400 53600 44200 10 line
53600 44200 53500 44400 10 line
53500 44400 53400 44200 10 line
53400 44200 53300 44400 10 line
53700 44400 53800 44200 10 line
53800 44200 53850 44300 10 line
54000 44300 53850 44300 10 line
53100 44300 53252 44300 10 line
53301 44400 53250 44300 10 line
grestore
gsave
false false false false 260.000000 [(R7) ] 0 53300 44500 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 0 53500 44000 180.555557 text
grestore
gsave
52800 44100 52800 44500 10 line
52800 44100 52500 44300 10 line
52500 44300 52800 44500 10 line
52500 44100 52500 44500 10 line
53100 44300 52900 44300 10 line
52200 44300 52400 44300 10 line
52400 44300 52500 44300 10 line
52800 44300 52900 44300 10 line
grestore
gsave
false false false false 260.000000 [(D2) ] 0 52550 44550 180.555557 text
grestore
54000 44300 54000 43300 10 line
gsave
45300 46800 45200 46600 10 line
45200 46600 45100 46800 10 line
45100 46800 45000 46600 10 line
45000 46600 44900 46800 10 line
45300 46800 45400 46600 10 line
45400 46600 45450 46700 10 line
45600 46700 45450 46700 10 line
44700 46700 44852 46700 10 line
44901 46800 44850 46700 10 line
grestore
gsave
false false false false 260.000000 [(R7) ] 0 44900 46900 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 0 45100 46400 180.555557 text
grestore
gsave
44600 42200 44800 42100 10 line
44800 42100 44600 42000 10 line
44600 42000 44800 41900 10 line
44800 41900 44600 41800 10 line
44600 42200 44800 42300 10 line
44800 42300 44700 42350 10 line
44700 42500 44700 42350 10 line
44700 41600 44700 41752 10 line
44600 41801 44700 41750 10 line
newpath
44700 42500
25
0 360 arc
fill
newpath
44700 42500
25
0 360 arc
fill
grestore
gsave
false false false false 260.000000 [(R7) ] 90 44500 41800 180.555557 text
grestore
gsave
false false false false 260.000000 [(20k) ] 90 45000 42000 180.555557 text
grestore
gsave
44700 41400 44700 41600 10 line
44600 41400 44800 41400 10 line
44655 41350 44745 41350 10 line
44680 41310 44720 41310 10 line
grestore
gsave
48500 42200 48300 42300 10 line
48300 42300 48500 42400 10 line
48500 42400 48300 42500 10 line
48300 42500 48500 42600 10 line
48500 42200 48300 42100 10 line
48300 42100 48400 42050 10 line
48400 41900 48400 42050 10 line
48400 42800 48400 42648 10 line
48500 42599 48400 42650 10 line
grestore
gsave
false false false false 260.000000 [(R7) ] 270 48600 42600 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 270 48100 42400 180.555557 text
grestore
gsave
48400 41700 48400 41900 10 line
48300 41700 48500 41700 10 line
48355 41650 48445 41650 10 line
48380 41610 48420 41610 10 line
grestore
48400 42800 48400 43900 10 line
45600 45900 45600 46700 10 line
45600 46700 47200 46700 10 line
gsave
42900 46500 42900 46700 10 line
42800 46500 43000 46500 10 line
42855 46450 42945 46450 10 line
42880 46410 42920 46410 10 line
grestore
44700 46700 42900 46700 10 line
43700 46700 43700 45900 10 line
43700 45900 43800 45900 10 line
54200 47000 53600 47000 10 line
51400 47000 51400 43300 10 line
52200 44300 51400 44300 10 line
[[52000 45000] [52100 45000] [52200 45000] [52300 45000] [52400 45000] [52500 45000] [52600 45000] [52700 45000] [52800 45000] [52900 45000] [53000 45000] [53100 45000] [53200 45000] [53300 45000] [53400 45000] [53500 45000] [53600 45000] [53700 45000] [53800 45000] [53900 45000] [54000 45000] [54100 45000] [54200 45000] [54300 45000] [54400 45000] [54500 45000] [54600 45000] [54700 45000] [54800 45000] [54900 45000] [55000 45000] [55100 45000] [55200 45000] [55300 45000] [55400 45000] [55500 45000] [55600 45000] [55700 45000] [55800 45000] [55900 45000] [56000 45000] [56100 45000] ] 10 dashed
[[56200 45000] [56200 45100] [56200 45200] [56200 45300] [56200 45400] [56200 45500] [56200 45600] [56200 45700] [56200 45800] [56200 45900] [56200 46000] [56200 46100] [56200 46200] [56200 46300] [56200 46400] [56200 46500] [56200 46600] [56200 46700] [56200 46800] [56200 46900] [56200 47000] [56200 47100] [56200 47200] [56200 47300] [56200 47400] [56200 47500] [56200 47600] [56200 47700] ] 10 dashed
[[56200 47800] [56100 47800] [56000 47800] [55900 47800] [55800 47800] [55700 47800] [55600 47800] [55500 47800] [55400 47800] [55300 47800] [55200 47800] [55100 47800] [55000 47800] [54900 47800] [54800 47800] [54700 47800] [54600 47800] [54500 47800] [54400 47800] [54300 47800] [54200 47800] [54100 47800] [54000 47800] [53900 47800] [53800 47800] [53700 47800] [53600 47800] [53500 47800] [53400 47800] [53300 47800] [53200 47800] [53100 47800] [53000 47800] [52900 47800] [52800 47800] [52700 47800] [52600 47800] [52500 47800] [52400 47800] [52300 47800] [52200 47800] [52100 47800] ] 10 dashed
[[52000 47800] [52000 47700] [52000 47600] [52000 47500] [52000 47400] [52000 47300] [52000 47200] [52000 47100] [52000 47000] [52000 46900] [52000 46800] [52000 46700] [52000 46600] [52000 46500] [52000 46400] [52000 46300] [52000 46200] [52000 46100] [52000 46000] [52000 45900] [52000 45800] [52000 45700] [52000 45600] [52000 45500] [52000 45400] [52000 45300] [52000 45200] [52000 45100] ] 10 dashed
51400 47000 51800 47000 10 line
47200 43900 47200 43300 10 line
47200 48600 47200 46700 10 line
gsave
47200 41400 47200 41600 10 line
47100 41400 47300 41400 10 line
47155 41350 47245 41350 10 line
47180 41310 47220 41310 10 line
grestore
gsave
49200 45300 49600 45300 10 line
49200 45300 49400 45600 10 line
49400 45600 49600 45300 10 line
49200 45600 49600 45600 10 line
49400 45000 49400 45200 10 line
49400 45900 49400 45700 10 line
49400 45700 49400 45600 10 line
49400 45300 49400 45200 10 line
grestore
gsave
false true false true 260.000000 [(D2) ] 0 49850 45450 180.555557 text
grestore
49400 45900 49400 46700 10 line
49400 46700 48400 46700 10 line
gsave
49500 44400 49300 44500 10 line
49300 44500 49500 44600 10 line
49500 44600 49300 44700 10 line
49300 44700 49500 44800 10 line
49500 44400 49300 44300 10 line
49300 44300 49400 44250 10 line
49400 44100 49400 44250 10 line
49400 45000 49400 44848 10 line
49500 44799 49400 44850 10 line
grestore
gsave
false false false false 260.000000 [(R7) ] 270 49600 44800 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 270 49100 44600 180.555557 text
grestore
49400 44100 49400 43300 10 line
newpath
48400 43300
25
0 360 arc
fill
newpath
48400 43300
25
0 360 arc
fill
newpath
51400 43300
25
0 360 arc
fill
newpath
49400 43300
25
0 360 arc
fill
newpath
54000 43300
25
0 360 arc
fill
newpath
50500 48600
25
0 360 arc
fill
newpath
53600 47000
25
0 360 arc
fill
newpath
48400 46700
25
0 360 arc
fill
newpath
48400 48600
25
0 360 arc
fill
newpath
48400 48600
25
0 360 arc
fill
newpath
50500 48600
25
0 360 arc
fill
newpath
48400 48600
25
0 360 arc
fill
newpath
48400 48600
25
0 360 arc
fill
newpath
48400 49700
25
0 360 arc
fill
newpath
48400 48600
25
0 360 arc
fill
newpath
48400 48600
25
0 360 arc
fill
newpath
44700 42500
25
0 360 arc
fill
newpath
54000 43300
25
0 360 arc
fill
newpath
54000 43300
25
0 360 arc
fill
newpath
44700 42500
25
0 360 arc
fill
newpath
44700 42500
25
0 360 arc
fill
newpath
48400 43300
25
0 360 arc
fill
newpath
45600 46700
25
0 360 arc
fill
newpath
45600 46700
25
0 360 arc
fill
newpath
47200 46700
25
0 360 arc
fill
newpath
43700 46700
25
0 360 arc
fill
newpath
43700 46700
25
0 360 arc
fill
newpath
43700 46700
25
0 360 arc
fill
newpath
53600 47000
25
0 360 arc
fill
newpath
51400 47000
25
0 360 arc
fill
newpath
51400 43300
25
0 360 arc
fill
newpath
51400 43300
25
0 360 arc
fill
newpath
51400 44300
25
0 360 arc
fill
newpath
51400 44300
25
0 360 arc
fill
newpath
51400 44300
25
0 360 arc
fill
newpath
51400 47000
25
0 360 arc
fill
newpath
47200 46700
25
0 360 arc
fill
newpath
48400 46700
25
0 360 arc
fill
newpath
49400 43300
25
0 360 arc
fill
newpath
49400 43300
25
0 360 arc
fill
showpage
%%End
